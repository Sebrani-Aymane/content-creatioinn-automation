import requests
from selenium import webdriver
from selenium_stealth import stealth_chrome
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from tiktok_uploader.auth import AuthBackend
from tiktok_uploader.upload import upload_video
import json
import time
from bs4 import BeautifulSoup
import os
import logging

class TikTokAutomator:
    def __init__(self, tiktok_username, tiktok_password):
        self.tiktok_auth = {
            'username': tiktok_username,
            'password': tiktok_password
        }
        self.setup_logging()
        self.setup_browser()

    def setup_logging(self):
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            filename='tiktok_automation.log'
        )
        self.logger = logging.getLogger(__name__)

    def setup_browser(self):
        options = webdriver.ChromeOptions()
        options.add_argument('--headless')
        options.add_argument('--no-sandbox')
        self.driver = webdriver.Chrome(options=options)
        stealth_chrome(self.driver)

    def get_trending_topics(self):
        """Scrapes TikTok trending page for popular topics"""
        try:
            self.driver.get('https://www.tiktok.com/explore')
            WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located((By.CLASS_NAME, 'trending-item'))
            )
            trending_elements = self.driver.find_elements(By.CLASS_NAME, 'trending-item')
            return [elem.text for elem in trending_elements[:4]]
        except Exception as e:
            self.logger.error(f"Error getting trending topics: {str(e)}")
            return []

    def search_ai_video_creator(self, topic):
        """Searches Google for AI video creators and returns first result"""
        try:
            search_query = f"free ai shorts creator {topic}"
            self.driver.get(f'https://www.google.com/search?q={search_query}')
            first_result = WebDriverWait(self.driver, 10).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, 'div.g a'))
            )
            return first_result.get_attribute('href')
        except Exception as e:
            self.logger.error(f"Error searching AI video creator: {str(e)}")
            return None

    def create_video(self, topic, ai_tool_url):
        """Creates video using AI tool (implementation depends on specific tool API)"""
        try:
            # This is a placeholder - actual implementation would depend on the AI tool's API
            video_path = f"generated_video_{topic}.mp4"
            return video_path
        except Exception as e:
            self.logger.error(f"Error creating video: {str(e)}")
            return None

    def post_to_tiktok(self, video_path, description):
        """Posts video to TikTok using upload API"""
        try:
            auth = AuthBackend(self.tiktok_auth['username'], self.tiktok_auth['password'])
            upload_video(video_path, description=description, auth=auth)
            return True
        except Exception as e:
            self.logger.error(f"Error posting to TikTok: {str(e)}")
            return False

    def run_automation(self):
        """Main function to run the entire automation process"""
        successful_posts = 0
        trending_topics = self.get_trending_topics()

        for topic in trending_topics:
            try:
                # Find AI video creator
                ai_tool_url = self.search_ai_video_creator(topic)
                if not ai_tool_url:
                    continue

                # Create video
                video_path = self.create_video(topic, ai_tool_url)
                if not video_path:
                    continue

                # Post to TikTok
                description = f"#{topic} #trending #viral"
                if self.post_to_tiktok(video_path, description):
                    successful_posts += 1

                # Clean up
                if os.path.exists(video_path):
                    os.remove(video_path)

                # Respect rate limits
                time.sleep(60)

            except Exception as e:
                self.logger.error(f"Error in automation cycle for topic {topic}: {str(e)}")
                continue

            if successful_posts >= 4:
                break

        self.driver.quit()
        return successful_posts

if __name__ == "__main__":
    automator = TikTokAutomator("your_username", "your_password")
    posts_created = automator.run_automation()
    print(f"Successfully created and posted {posts_created} videos")
